class Example {
    public static int MyStringToInt(string s) {
        return int.Parse(s);
    }

    public static double MyStringToDouble(string s) {
        return double.Parse(s);
    }

    public static string MyIntToString(int i) {
        return i.ToString();
    }

    public static string MyDoubleToString(double d) {
        return string.Format("{0:N6}", d);
    }

    public static string MyBoolToString(bool b) {
        return b ? "true" : "false";
    }

    public static int? MyIntToNullable(int i) {
        if (i > 0) {
            return i;
        } else if (i < 0) {
            return -i;
        } else {
            return null;
        }
    }

    public static int MyNullableToInt(int? i) {
        return i ?? -1;
    }
    
    public static IList<string> MyListSorted(IList<string> lst) {
        return lst.OrderBy(x => x).ToList();
    }

    public static IList<string> MyListSortedByLength(IList<string> lst) {
        return lst.OrderBy(x => x.Length).ToList();
    }

    public static IList<int> MyListFilter(IList<int> lst) {
        return lst.Where(x => x % 3 == 0).ToList();
    }

    public static IList<int> MyListMap(IList<int> lst) {
        return lst.Select(x => x * x).ToList();
    }

    public static int MyListReduce(IList<int> lst) {
        return lst.Aggregate(0, (acc, x) => acc * 10 + x);
    }

    public static int MyListOperations(IList<int> lst) {
        return lst.Where(x => x % 3 == 0)
            .Select(x => x * x)
            .Aggregate(0, (acc, x) => acc * 10 + x);
    }

    public static IDictionary<int, int> MyListToDict(IList<int> lst) {
        return lst.ToDictionary(x => x, x => x * x);
    }

    public static IList<int> MyDictToList(IDictionary<int, int> lst) {
        return lst.OrderBy(x => x.Key).Select(x => x.Key + x.Value).ToList();
    }

    public static void MyPrintString(string s) {
        Console.WriteLine(s);
    }

    public static void MyPrintStringList(IList<string> lst) {
        foreach (var x in lst) {
            Console.Write(x + " ");
        }
        Console.WriteLine();
    }

    public static void MyPrintIntList(IList<int> lst) {
        MyPrintStringList(lst.Select(x => MyIntToString(x)).ToList());
    }

    public static void MyPrintDict(IDictionary<int, int> dict) {
        foreach (var (k, v) in dict) {
            Console.Write(MyIntToString(k) + "->" + MyIntToString(v) + " ");
        }
        Console.WriteLine();
    }

    public static void Main() {
        MyPrintString("Hello, World!");
        MyPrintString(MyIntToString(MyStringToInt("123")));
        MyPrintString(MyDoubleToString(MyStringToDouble("123.456")));
        MyPrintString(MyBoolToString(false));
        MyPrintString(MyIntToString(MyNullableToInt(MyIntToNullable(18))));
        MyPrintString(MyIntToString(MyNullableToInt(MyIntToNullable(-15))));
        MyPrintString(MyIntToString(MyNullableToInt(MyIntToNullable(0))));
        MyPrintStringList(MyListSorted(new List<string> {"e", "dddd", "ccccc", "bb", "aaa"}));
        MyPrintStringList(MyListSortedByLength(new List<string> {"e", "dddd", "ccccc", "bb", "aaa"}));
        MyPrintString(MyIntToString(MyListReduce(MyListMap(MyListFilter(new List<int> {3, 12, 5, 8, 9, 15, 7, 17, 21, 11})))));
        MyPrintString(MyIntToString(MyListOperations(new List<int> {3, 12, 5, 8, 9, 15, 7, 17, 21, 11})));
        MyPrintDict(MyListToDict(new List<int> {3, 1, 4, 2, 5, 9, 8, 6, 7, 0}));
        MyPrintIntList(MyDictToList(new Dictionary<int, int> {{3, 9}, {1, 1}, {4, 16}, {2, 4}, {5, 25}, {9, 81}, {8, 64}, {6, 36}, {7, 49}, {0, 0}}));
    }
}

// Translate from C# to Elixir, Remember to change the naming convention

defmodule Example do
    def my_string_to_int(s) do
        String.to_integer(s)
    end

    def my_string_to_double(s) do
        String.to_float(s)
    end

    def my_int_to_string(i) do
        Integer.to_string(i)
    end

    def my_double_to_string(d) do
        :erlang.float_to_binary(d, decimals: 6)
    end

    def my_bool_to_string(b) do
        if b, do: "true", else: "false"
    end

    def my_int_to_nullable(i) do
        cond do
            i > 0 -> i
            i < 0 -> -i
            true -> nil
        end
    end

    def my_nullable_to_int(i) do
        case i do
            nil -> -1
            x -> x
        end
    end

    def my_list_sorted(lst) do
        Enum.sort(lst)
    end

    def my_list_sorted_by_length(lst) do
        Enum.sort_by(lst, &String.length/1)
    end

    def my_list_filter(lst) do
        Enum.filter(lst, &(rem(&1, 3) == 0))
    end

    def my_list_map(lst) do
        Enum.map(lst, &(&1 * &1))
    end

    def my_list_reduce(lst) do
        Enum.reduce(lst, 0, &(&2 * 10 + &1))
    end

    def my_list_operations(lst) do
        lst |> Enum.filter(fn x -> rem(x, 3) == 0 end)
        |> Enum.map(fn x -> x * x end)
        |> Enum.reduce(0, fn x, acc -> acc * 10 + x end)
    end

    def my_list_to_dict(lst) do
        Map.new(lst, fn x -> {x, x * x} end)
    end

    def my_dict_to_list(dict) do
        dict |> Enum.to_list()
        |> Enum.sort()
        |> Enum.map(fn {k, v} -> k + v end)
    end

    def my_print_string(s) do
        IO.puts(s)
    end

    def my_print_string_list(lst) do
        for x <- lst do
            IO.write(x <> " ")
        end
        IO.puts("")
    end

    def my_print_int_list(lst) do
        lst |> Enum.map(&my_int_to_string/1) |> my_print_string_list()
    end

    def my_print_dict(dict) do
        for {k, v} <- dict do
            IO.write(my_int_to_string(k) <> "->" <> my_int_to_string(v) <> " ")
        end
        IO.puts("")
    end

    def main() do
        my_print_string("Hello, World!")
        my_print_string(my_int_to_string(my_string_to_int("123")))
        my_print_string(my_double_to_string(my_string_to_double("123.456")))
        my_print_string(my_bool_to_string(false))
        my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(18))))
        my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(-15))))
        my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(0))))
        my_print_string_list(my_list_sorted(["e", "dddd", "ccccc", "bb", "aaa"]))
        my_print_string_list(my_list_sorted_by_length(["e", "dddd", "ccccc", "bb", "aaa"]))
        my_print_string(my_int_to_string(my_list_reduce(my_list_map(my_list_filter([3, 12, 5, 8, 9, 15, 7, 17, 21, 11])))))
        my_print_string(my_int_to_string(my_list_operations([3, 12, 5, 8, 9, 15, 7, 17, 21, 11])))
        my_print_dict(my_list_to_dict([3, 1, 4, 2, 5, 9, 8, 6, 7, 0]))
        my_print_int_list(my_dict_to_list(%{3 => 9, 1 => 1, 4 => 16, 2 => 4, 5 => 25, 9 => 81, 8 => 64, 6 => 36, 7 => 49, 0 => 0}))
    end
end

Example.main()

// Translate from C# to Perl, Remember to change the naming convention

use List::Util qw(reduce);
use feature qw(signatures);

sub my_string_to_int ($s) {
    return int($s);
}

sub my_string_to_double ($s) {
    return $s + 0;
}

sub my_int_to_string ($i) {
    return "$i";
}

sub my_double_to_string ($d) {
    return sprintf("%.6f", $d);
}

sub my_bool_to_string ($b) {
    return $b ? "true" : "false";
}

sub my_int_to_nullable ($i) {
    if ($i > 0) {
        return $i;
    } elsif ($i < 0) {
        return -$i;
    } else {
        return undef;
    }
}

sub my_nullable_to_int ($i) {
    return defined($i) ? $i : -1;
}

sub my_list_sorted (@lst) {
    return sort @lst;
}

sub my_list_sorted_by_length (@lst) {
    return sort { length($a) <=> length($b) } @lst;
}

sub my_list_filter (@lst) {
    return grep { $_ % 3 == 0 } @lst;
}

sub my_list_map (@lst) {
    return map { $_ * $_ } @lst;
}

sub my_list_reduce (@lst) {
    return reduce { $a * 10 + $b } 0, @lst;
}

sub my_list_operations (@lst) {
    return reduce { $a * 10 + $b } 0, 
        map { $_ * $_ } 
            grep { $_ % 3 == 0 } @lst;
}

sub my_list_to_dict (@lst) {
    return map { $_ => $_ * $_ } @lst ;
}

sub my_dict_to_list (%dict) {
    return map { $_ + $dict{$_} } sort keys %dict;
}

sub my_print_string ($s) {
    print $s . "\n";
}

sub my_print_string_list (@lst) {
    for my $x (@lst) {
        print $x . " ";
    }
    print "\n";
}

sub my_print_int_list (@lst) {
    my_print_string_list(map { my_int_to_string($_) } @lst);
}

sub my_print_dict (%dict) {
    while (my ($k, $v) = each %dict) {
        print my_int_to_string($k) . "->" . my_int_to_string($v) . " ";
    }
    print "\n";
}

my_print_string("Hello, World!");
my_print_string(my_int_to_string(my_string_to_int("123")));
my_print_string(my_double_to_string(my_string_to_double("123.456")));
my_print_string(my_bool_to_string(0));
my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(18))));
my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(-15))));
my_print_string(my_int_to_string(my_nullable_to_int(my_int_to_nullable(0))));
my_print_string_list(my_list_sorted(("e", "dddd", "ccccc", "bb", "aaa")));
my_print_string_list(my_list_sorted_by_length(("e", "dddd", "ccccc", "bb", "aaa")));
my_print_string(my_int_to_string(my_list_reduce(my_list_map(my_list_filter((3, 12, 5, 8, 9, 15, 7, 17, 21, 11))))));
my_print_string(my_int_to_string(my_list_operations((3, 12, 5, 8, 9, 15, 7, 17, 21, 11))));
my_print_dict(my_list_to_dict((3, 1, 4, 2, 5, 9, 8, 6, 7, 0)));
my_print_int_list(my_dict_to_list((3 => 9, 1 => 1, 4 => 16, 2 => 4, 5 => 25, 9 => 81, 8 => 64, 6 => 36, 7 => 49, 0 => 0)));

// Translate from C# to Python, Remember to change the naming convention
