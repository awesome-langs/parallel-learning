// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Process from "process";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Core__String from "@rescript/core/src/Core__String.res.mjs";

function myStringToInt(s) {
  return Core__Option.getOr(Core__Int.fromString(undefined, s), -1);
}

function myStringToDouble(s) {
  return Core__Option.getOr(Core__Float.fromString(s), -1.0);
}

function myIntToString(i) {
  return i.toString();
}

function myDoubleToString(d) {
  return d.toFixed(6);
}

function myBoolToString(b) {
  if (b) {
    return "true";
  } else {
    return "false";
  }
}

function myIntToNullable(i) {
  if (i > 0) {
    return i;
  } else if (i < 0) {
    return -i | 0;
  } else {
    return ;
  }
}

function myNullableToInt(i) {
  return Core__Option.getOr(i, -1);
}

function myListSorted(lst) {
  return lst.toSorted(Core__String.compare);
}

function myListSortedByLength(lst) {
  return lst.toSorted(function (a, b) {
              return Core__Int.compare(a.length, b.length);
            });
}

function myListFilter(lst) {
  return lst.filter(function (x) {
              return x % 3 === 0;
            });
}

function myListMap(lst) {
  return lst.map(function (x) {
              return Math.imul(x, x);
            });
}

function myListReduce(lst) {
  return Core__Array.reduce(lst, 0, (function (acc, x) {
                return Math.imul(acc, 10) + x | 0;
              }));
}

function myListOperations(lst) {
  return Core__Array.reduce(lst.filter(function (x) {
                    return x % 3 === 0;
                  }).map(function (x) {
                  return Math.imul(x, x);
                }), 0, (function (acc, x) {
                return Math.imul(acc, 10) + x | 0;
              }));
}

function myListToDict(lst) {
  return new Map(lst.map(function (x) {
                  return [
                          x,
                          Math.imul(x, x)
                        ];
                }));
}

function myDictToList(dict) {
  return Array.from(dict.entries()).toSorted(function (param, param$1) {
                return Core__Int.compare(param[0], param$1[0]);
              }).map(function (param) {
              return param[0] + param[1] | 0;
            });
}

function myPrintString(s) {
  console.log(s);
}

function myPrintStringList(lst) {
  lst.forEach(function (x) {
        Process.stdout.write(Buffer.from(x + " "));
      });
  console.log("");
}

function myPrintIntList(lst) {
  myPrintStringList(lst.map(function (x) {
            return x.toString();
          }));
}

function myPrintDict(dict) {
  dict.forEach(function (v, k) {
        Process.stdout.write(Buffer.from(k.toString() + "->" + v.toString() + " "));
      });
  console.log("");
}

console.log("Hello, World!");

var s = myStringToInt("123").toString();

console.log(s);

var s$1 = myStringToDouble("123.456").toFixed(6);

console.log(s$1);

console.log("false");

var i = myIntToNullable(18);

var s$2 = Core__Option.getOr(i, -1).toString();

console.log(s$2);

var i$1 = myIntToNullable(-15);

var s$3 = Core__Option.getOr(i$1, -1).toString();

console.log(s$3);

var i$2 = myIntToNullable(0);

var s$4 = Core__Option.getOr(i$2, -1).toString();

console.log(s$4);

myPrintStringList([
        "e",
        "dddd",
        "ccccc",
        "bb",
        "aaa"
      ].toSorted(Core__String.compare));

myPrintStringList(myListSortedByLength([
          "e",
          "dddd",
          "ccccc",
          "bb",
          "aaa"
        ]));

var s$5 = myListReduce(myListMap(myListFilter([
                3,
                12,
                5,
                8,
                9,
                15,
                7,
                17,
                21,
                11
              ]))).toString();

console.log(s$5);

var s$6 = myListOperations([
        3,
        12,
        5,
        8,
        9,
        15,
        7,
        17,
        21,
        11
      ]).toString();

console.log(s$6);

myPrintDict(myListToDict([
          3,
          1,
          4,
          2,
          5,
          9,
          8,
          6,
          7,
          0
        ]));

myPrintIntList(myDictToList(new Map([
              [
                3,
                9
              ],
              [
                1,
                1
              ],
              [
                4,
                16
              ],
              [
                2,
                4
              ],
              [
                5,
                25
              ],
              [
                9,
                81
              ],
              [
                8,
                64
              ],
              [
                6,
                36
              ],
              [
                7,
                49
              ],
              [
                0,
                0
              ]
            ])));

var Writable;

var Process$1;

var $$Buffer;

export {
  Writable ,
  Process$1 as Process,
  $$Buffer ,
  myStringToInt ,
  myStringToDouble ,
  myIntToString ,
  myDoubleToString ,
  myBoolToString ,
  myIntToNullable ,
  myNullableToInt ,
  myListSorted ,
  myListSortedByLength ,
  myListFilter ,
  myListMap ,
  myListReduce ,
  myListOperations ,
  myListToDict ,
  myDictToList ,
  myPrintString ,
  myPrintStringList ,
  myPrintIntList ,
  myPrintDict ,
}
/*  Not a pure module */
